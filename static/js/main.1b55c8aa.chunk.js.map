{"version":3,"sources":["components/TodoItem.js","todosData.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","props","react_default","a","createElement","className","style","display","type","checked","elem","completed","onChange","handleChange","id","fontStyle","color","textDecoration","text","todosData","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","todos","bind","assertThisInitialized","console","log","setState","prevState","map","todo","_this2","TodoItems","components_TodoItem","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mMAwBeA,MAtBf,SAAkBC,GAMhB,OACEC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aACZH,EAAAC,EAAAC,cAAA,MAAIE,MAAO,CACTC,QAAS,UAETL,EAAAC,EAAAC,cAAA,SACEI,KAAK,WACLC,QAASR,EAAMS,KAAKC,UACpBC,SAAU,kBAAMX,EAAMY,aAAaZ,EAAMS,KAAKI,OAChDZ,EAAAC,EAAAC,cAAA,QAAME,MAAOL,EAAMS,KAAKC,UAdP,CACrBI,UAAW,SACXC,MAAO,UACPC,eAAgB,gBAaR,MAAOhB,EAAMS,KAAKQ,SCSfC,SA5BG,CACd,CACIL,GAAI,EACJI,KAAM,qBACNP,WAAW,GAEf,CACIG,GAAI,EACJI,KAAM,mBACNP,WAAW,GAEf,CACIG,GAAI,EACJI,KAAM,mBACNP,WAAW,GAEf,CACIG,GAAI,EACJI,KAAM,WACNP,WAAW,GAEf,CACIG,GAAI,EACJI,KAAM,mCACNP,WAAW,KCgBJS,cAlCb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACXC,MAAOV,GAGTE,EAAKR,aAAeQ,EAAKR,aAAaiB,KAAlBR,OAAAS,EAAA,EAAAT,CAAAD,IANRA,4EAQDP,GACXkB,QAAQC,IAAI,YAAanB,GACzBU,KAAKU,SAAS,SAAAC,GAOZ,MAAM,CACJN,MAPkBM,EAAUN,MAAMO,IAAI,SAAAC,GAItC,OAHGA,EAAKvB,KAAOA,IACbuB,EAAK1B,WAAa0B,EAAK1B,WAElB0B,wCAQJ,IAAAC,EAAAd,KAEDe,EAAYf,KAAKI,MAAMC,MAAMO,IAAI,SAAA1B,GAAI,OAAIR,EAAAC,EAAAC,cAACoC,EAAD,CAAUC,IAAK/B,EAAKI,GAAIJ,KAAMA,EAAMG,aAAcyB,EAAKzB,iBACtG,OACEX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACZkC,UA7BSG,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO/C,EAAAC,EAAAC,cAAC8C,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1b55c8aa.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction TodoItem(props) {\r\n  const completedStyle = {\r\n    fontStyle: \"italic\",\r\n    color: \"#cdcdcd\",\r\n    textDecoration: \"line-through\"\r\n  }\r\n  return (\r\n    <ul className=\"todo-item\">\r\n      <li style={{\r\n        display: \"block\"\r\n      }}>\r\n        <input\r\n          type=\"checkbox\"\r\n          checked={props.elem.completed}\r\n          onChange={() => props.handleChange(props.elem.id)}/>\r\n        <span style={props.elem.completed\r\n          ? completedStyle\r\n          : null}>{props.elem.text}</span>\r\n      </li>\r\n    </ul>\r\n  )\r\n}\r\nexport default TodoItem;","const todosData = [\r\n    {\r\n        id: 1,\r\n        text: \"Take out the trash\",\r\n        completed: true\r\n    },\r\n    {\r\n        id: 2,\r\n        text: \"Grocery shopping\",\r\n        completed: false\r\n    },\r\n    {\r\n        id: 3,\r\n        text: \"Clean gecko tank\",\r\n        completed: false\r\n    },\r\n    {\r\n        id: 4,\r\n        text: \"Mow lawn\",\r\n        completed: true\r\n    },\r\n    {\r\n        id: 5,\r\n        text: \"Catch up on Arrested Development\",\r\n        completed: false\r\n    }\r\n]\r\n\r\nexport default todosData","import React, {Component} from 'react';\nimport TodoItem from './components/TodoItem';\nimport \"./index.css\";\nimport todosData from \"./todosData\";\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      todos: todosData,\n  \n    }\n    this.handleChange = this.handleChange.bind(this) \n  }\n  handleChange(id){\n    console.log(\"Completed\", id)\n    this.setState(prevState => {\n      const updateTodos = prevState.todos.map(todo => {\n        if(todo.id === id){\n          todo.completed = !todo.completed\n        }\n        return todo\n      })\n      return{ \n        todos: updateTodos\n      }\n    })\n  }\n  \n  render() {\n    \n    const TodoItems = this.state.todos.map(elem => <TodoItem key={elem.id} elem={elem} handleChange={this.handleChange}/>)\n    return (\n      <div className=\"todo-list\">\n        {TodoItems}\n      </div>\n    )\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}